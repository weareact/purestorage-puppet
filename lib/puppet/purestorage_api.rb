#=====================================
#This class  is  mainly used for 
#REST API 1.6 for Pure Storage Array
#It will have utility methods 
#to perform CRUD operations on 
#Volume and Host and creating 
#connection between them. 
#
# Supports REST API 1.6
#=====================================

require 'net/https'
require 'uri'
require 'json'
require 'puppet/cacheservice'

class PureStorageApi
  
  CONTENT_TYPE      = "Content-Type"
  APPLICATION_JSON  = "application/json"
  COOKIE            = "Cookie"
  TOKEN             = "TOKEN"
  SESSION_KEY       = "SESSION_KEY"
  REST_VERSION      = "1.6"
  CREATE            = "create"
  UPDATE            = "update"
  DELETE            = "delete"
  LIST              = "list"
  
  # #------------------------------------------------------------------------------------
  # # Constructor
  # #------------------------------------------------------------------------------------
  # def initialize(url)
  #   @url = URI.parse(url)
  #   @deviceIp = @url.host
  #   @userName = @url.user
  #   @password = @url.password
  #   @restVersion = REST_VERSION
  #   #Base URI is ... https://m70.purecloud.local/api/1.12
  #   @baseUri = "https://" + @deviceIp + "/api/"+@restVersion
  #   @cacheService = CacheService.new(@deviceIp)

  #   #Delete Cache if its expired.
  #   if(@cacheService.isCacheExpired)
  #    # puts "Cache is expired, hence deleting file :" + @deviceIp
  #    Puppet.debug "Cache is expired, hence deleting file :" + @deviceIp
  #     @cacheService.deleteCache()
  #   end
  # end

  # -----------------------------------------------------------------------------------
  # Constructor
  # -----------------------------------------------------------------------------------
  def initialize(deviceIp,userName,password,restVersion)
    @deviceIp = deviceIp
    @userName = userName
    @password = password
    @restVersion = restVersion
    #Base URI is ... https://m70.purecloud.local/api/1.12
    @baseUri = "https://" + deviceIp + "/api/"+restVersion
    @cacheService = CacheService.new(deviceIp)

    #Delete Cache if its expired.
    if(@cacheService.isCacheExpired)
    # puts "Cache is expired, hence deleting file :" + @deviceIp
    Puppet.debug "Cache is expired, hence deleting file :" + @deviceIp
      @cacheService.deleteCache()
    end       
  end

  #------------------------------------------------------------------------------------
  # Step 1 : Create Token 
  # e.g.
  # POST    https://m70.purecloud.local/api/1.12/auth/apitoken
  #
  # This method returns token generated by REST server which is used to create session
  #------------------------------------------------------------------------------------
  def createToken
    token = nil
    
    begin 
      token = @cacheService.readCache(TOKEN)
     # puts "Found Token : " + token
     Puppet.debug("Found Token : " + token)
    rescue
      Puppet.debug("Looks like token is not cashed earlier or some other issue!")
    end
      
    if (token == nil)
        #uri = URI.parse('https://m70.purecloud.local/api/1.12/auth/apitoken')
        url = @baseUri + "/auth/apitoken"
        uri = URI.parse(url)
        
        #Define Header here
        #header = {'Content-Type'=> 'application/json'}
        header = {CONTENT_TYPE  => APPLICATION_JSON}
          
        # Create the HTTP objects
        http = Net::HTTP.new(uri.host, uri.port)
        http.use_ssl = true
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        
        #Get Request Object
        request = Net::HTTP::Post.new(uri.request_uri, header)
        
        #Set Body for the request
        #request.set_form_data('password' => 'pureuser', 'username' => 'pureuser')
        request.set_form_data('password' => @password, 'username' => @userName)
        begin
          # Send the request
          response = http.request(request)
          parsed = JSON.parse(response.body)
          token = parsed['api_token']
          #Store in Cache  
          @cacheService.writeCache(TOKEN,token)
        rescue Exception
          #puts "Device '"+@deviceIp + "' is either not reachable or down!!!"
          Puppet.err("Device '"+@deviceIp + "' is either not reachable or down!!!")
          #raise Exception          
        end
      else
       # puts "TODO Else of if token == nil"
      end
      
      return token        
  end
  
  #----------------------------------------------------------------------------
  #Step 2: Create session by passing token obtained in createToken method
  # e.g.
  # POST     https://m70.purecloud.local/api/1.12/auth/session
  #
  # This method returns session key which will be used in further rest calls
  #----------------------------------------------------------------------------
  def createSession (token)
    session_key = nil

    begin 
      session_key = @cacheService.readCache(SESSION_KEY)
     # puts "Found session_key : " + session_key
     Puppet.debug("Found session_key : " + session_key)
    rescue
      #puts "Looks like session is not cashed earlier or some other issue!"
      Puppet.debug("Looks like session is not cashed earlier or some other issue!")
    end

    if (session_key == nil)
      #uri = URI.parse('https://m70.purecloud.local/api/1.12/auth/session')
      url = @baseUri + "/auth/session"
      uri = URI.parse(url)

      #Define Header here  
      #header = {'Content-Type'=> 'application/json'}
      header = {CONTENT_TYPE  => APPLICATION_JSON}

      # Create the HTTP objects
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      #Get Request Object
      request = Net::HTTP::Post.new(uri.request_uri, header)
      #Set Body for the request
      #request.set_form_data('api_token' => '859024da-a74a-babd-a7a7-b9835f2b2aba')
      request.set_form_data('api_token' => token)
      begin
        # Send the request
        response = http.request(request)
        # parsed header against 'Set-Cookie' contains session information
        session_key = response.header['Set-Cookie']
        #puts session_key
        #Store in Cache  
        @cacheService.writeCache(SESSION_KEY,session_key) 
      rescue Exception
        #puts "Device '"+@deviceIp + "' is either not reachable or down!!!"
        Puppet.err("Device '"+@deviceIp + "' is either not reachable or down!!!")
        #raise Exception          
      end
    else
      # puts "TODO Else of if session_key == nil"
    end
    return session_key
  end
  
  #-------------------------------------------------
  # This method calls creates (token and session)
  # e.g.
  #   https://pure01.example.com/api/1.12/volume
  # return generated session 
  #-------------------------------------------------
  def getSession
    token = createToken()
    if(token==nil)
      raise "Unable to create a token for device: "+@deviceIp+". Please check the credentials or device Ip Address provided in the url!"
    else
      session = createSession(token)
    end
    
    return session
  end
  
  #-------------------------------------------------
  # Generic method for GET requests
  # e.g.
  # GET  https://pure01.example.com/api/1.12/volume
  #-------------------------------------------------
  def getRestCall(arg_url)
    #uri = URI.parse('https://m70.purecloud.local/api/1.12/volume')
    url = @baseUri + arg_url
    uri = URI.parse(url)
    
    #get session
    session = getSession
    
    #Pass Session in header   
    header = {CONTENT_TYPE  => APPLICATION_JSON,  COOKIE => session}
    
    # Create the HTTP objects
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Get.new(uri.request_uri,header)
    # Send the request
    response = http.request(request)
    
    #puts response.body
     if(response.body["pure_err_key"]==nil)
       Puppet.info(response.body)
     else
       Puppet.err(response.body)
     end 
     
    return response.body
  end
  
  #-------------------------------------------------
  # Generic method for POST requests 
  # e.g.
  # POST https://pure01.example.com/api/1.12/volume/v5
  # {
  #   "size": "5G"
  # }
  #-------------------------------------------------
  def postRestCall(arg_url,arg_body)
   
       url = @baseUri + arg_url
       uri = URI.parse(url)
       
       #get session
       session = getSession
       
       #Pass Session in header   
       header = {CONTENT_TYPE  => APPLICATION_JSON,  COOKIE => session}
       
       # Create the HTTP objects
       http = Net::HTTP.new(uri.host, uri.port)
       http.use_ssl = true
       http.verify_mode = OpenSSL::SSL::VERIFY_NONE
       request = Net::HTTP::Post.new(uri.request_uri,header)
       request.body = arg_body.to_json
      # puts "@@@@@@@@: "+ request.body
       
       # Send the request
       response = http.request(request)
       
      # puts response.body
      if(response.body["pure_err_key"]==nil)
        Puppet.info(response.body)
      else
        Puppet.err(response.body)
      end 
  end
  
#-------------------------------------------------
 # Generic method for POST requests 
 # e.g.
 # PUT https://pure01.example.com/api/1.12/volume/v5
 #  {
 #    size: 10G
 #  }
 #-------------------------------------------------
 def putRestCall(arg_url,arg_body)
  
      url = @baseUri + arg_url
      uri = URI.parse(url)
      
      #get session
      session = getSession
      
      #Pass Session in header   
      header = {CONTENT_TYPE  => APPLICATION_JSON,  COOKIE => session}
      
      # Create the HTTP objects
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      request = Net::HTTP::Put.new(uri.request_uri,header)
      request.body = arg_body.to_json
     # puts "@@@@@@@@: "+ request.body
      
      # Send the request
      response = http.request(request)
      
      #puts response.body
     if(response.body["pure_err_key"]==nil)
       Puppet.info(response.body)
     else
       Puppet.err(response.body)
     end 
 end
 
#-------------------------------------------------
 # Generic method for delete requests 
 # e.g.
 # POST https://pure01.example.com/api/1.12/volume/v5
 # {
 #   "size": "5G"
 # }
 #-------------------------------------------------
 def deleteRestCall(arg_url)
  
      url = @baseUri + arg_url
      uri = URI.parse(url)
      
      #get session
      session = getSession
      
      #Pass Session in header   
      header = {CONTENT_TYPE  => APPLICATION_JSON,  COOKIE => session}
      
      # Create the HTTP objects
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      request = Net::HTTP::Delete.new(uri.request_uri,header)
      
      # Send the request
      response = http.request(request)
 end
 
 #----------------------------------------------------
 # This method checks if volume with given name exists
 #  It is dedicated to volumes
 #-----------------------------------------------
  def isVolumeExists(arg_volume_name, arg_volume_size)
      url = "/volume/"+arg_volume_name
      output = getRestCall(url)
      
      if(output["pure_err_key"]==nil)
         return true
      else
         return false
      end
   end


  #-------------------------------------------------
  # Its a controller method which decides 
  # which rest api to call depending on key
  # It is dedicated to volumes
  #-----------------------------------------------
  def executeVolumeRestApi(arg_key,*arg)
    Puppet.info(arg_key + " Action for volume:"+ arg[0])
    case arg_key
    when LIST  then
      getRestCall("/volume")
    when  CREATE then #arg[0] = volume_name, arg[1] = volume_size
        url = "/volume/"+arg[0]
        body = Hash.new("size" => arg[1]) 
      postRestCall(url,body["size"])
    when  UPDATE then
        url = "/volume/"+arg[0]
        body = Hash.new("size" => arg[1]) 
      putRestCall(url,body["size"])
    when  DELETE then
        url = "/volume/"+arg[0]
      deleteRestCall(url)
    else
      #puts "Invalid Option:" + arg_key
      Puppet.err("Invalid Operation:" + arg_key + ", Available operations are [create,update,delete,list].")
    end      
  end
  
  #----------------------------------------------------
  # This method checks if volume with given name exists
  # It is dedicated to hosts
  #-----------------------------------------------
  def isHostExists(arg_host_name, arg_host_iqnlist)
    url = "/host/"+arg_host_name
    output = getRestCall(url)
    
    if(output["pure_err_key"]==nil)
       return true
    else
       return false
    end
  end

  #-------------------------------------------------
  # Its a controller method which decides
  # which rest api to call depending on key
  # It is dedicated to Hosts
  #-----------------------------------------------
  def executeHostRestApi(arg_key,*arg)
    Puppet.info(arg_key + " Action for host:"+ arg[0])
    case arg_key
    when LIST  then
      getRestCall("/host")
    when  CREATE then #arg[0] = volume_name, arg[1] = volume_size
      url = "/host/"+arg[0]
      body = Hash.new("iqnlist" => arg[1], "wwnlist" => arg[2])
      postRestCall(url,body)
    when  UPDATE then
      url = "/host/"+arg[0]
      body = Hash.new("iqnlist" => arg[1], "wwnlist" => arg[2])
      putRestCall(url,body)
    when  DELETE then
      url = "/host/"+arg[0]
      deleteRestCall(url)
    else
      Puppet.err("Invalid Option:" + arg_key)
    end
  end
 
  #----------------------------------------------------
  # This method checks if connection with given name exists
  # It is dedicated to volumes
  # -----------------------------------------------
  def isConnectionExists(arg_host_name, arg_volume_name)
     url = "/host/"+arg_host_name+"/volume"
     output = getRestCall(url)

     if(output["vol"]!=nil)
       return true
     else
        return false
     end
  end

  #-------------------------------------------------
  # Its a controller method which decides 
  # which rest api to call depending on key
  # It is dedicated to Hosts
  # arg[0] = hostname, arg[1] = volumename
  #-----------------------------------------------
  def executeConnectionRestApi(arg_key,*arg)
    Puppet.info(arg_key + " Action for connection between host :"+arg[0]+" and volume:"+ arg[1])
   case arg_key
   when  CREATE then #arg[0] = volume_name, arg[1] = volume_size
       url = "/host/"+arg[0]+"/volume/"+arg[1]
       postRestCall(url,"")
   when  DELETE then
       url = "/host/"+arg[0]+"/volume/"+arg[1]
       deleteRestCall(url)
   else
      Puppet.err("Invalid Option:" + arg_key)
   end      
  end
end
